(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{520:function(e,t,s){"use strict";s.r(t);var a=s(28),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("浏览器安全方面主要三个方面：\n页面安全，浏览器网络安全，浏览器系统安全。")]),e._v(" "),s("p",[e._v("浏览器自己的安全策略：同源策略。")]),e._v(" "),s("h4",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[e._v("#")]),e._v(" 同源策略")]),e._v(" "),s("p",[e._v("具体来讲，同源策略主要表现在 DOM、Web 数据和网络这三个层面。")]),e._v(" "),s("ol",[s("li",[e._v("第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。")]),e._v(" "),s("li",[e._v("第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。由于同源策略，我们依然无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容。你可以自己试一下，这里我们就不做演示了。")]),e._v(" "),s("li",[e._v("第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。")])]),e._v(" "),s("p",[e._v("我们了解了同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性。")]),e._v(" "),s("p",[e._v("不过安全性和便利性是相互对立的，让不同的源之间绝对隔离，无疑是最安全的措施，但这也会使得 Web 项目难以开发和使用。因此我们就要在这之间做出权衡，出让一些安全性来满足灵活性；")]),e._v(" "),s("ol",[s("li",[e._v("页面中可以嵌入第三方资源")]),e._v(" "),s("li",[e._v("跨域资源共享和跨文档消息机制")])]),e._v(" "),s("ul",[s("li",[e._v("跨域资源共享（CORS），使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。")]),e._v(" "),s("li",[e._v("跨文档消息机制，可以通过 window.postMessage 的 JavaScript 接口来和不同源的 DOM 进行通信。")])]),e._v(" "),s("h4",{attrs:{id:"xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[e._v("#")]),e._v(" XSS攻击")]),e._v(" "),s("p",[e._v("XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。")]),e._v(" "),s("p",[e._v("XSS攻击分为三种")]),e._v(" "),s("ol",[s("li",[e._v("存储型 XSS 攻击")])]),e._v(" "),s("ul",[s("li",[e._v("首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；")]),e._v(" "),s("li",[e._v("然后用户向网站请求包含了恶意 JavaScript 脚本的页面；")]),e._v(" "),s("li",[e._v("当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。")])]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("反射型XSS攻击\n恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。")])]),e._v(" "),s("p",[s("strong",[e._v("Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方。")])]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("基于 DOM 的 XSS 攻击\n基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。")])]),e._v(" "),s("h5",{attrs:{id:"如何防止xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何防止xss攻击"}},[e._v("#")]),e._v(" 如何防止XSS攻击")]),e._v(" "),s("ol",[s("li",[e._v("服务器对输入脚本进行过滤或转码")]),e._v(" "),s("li",[e._v("充分利用 CSP\n为使CSP可用, 你需要配置你的网络服务器返回  Content-Security-Policy  HTTP头部。")])]),e._v(" "),s("p",[e._v("除此之外,  ")]),s("meta"),e._v("  元素也可以被用来配置该策略, 例如"),s("p"),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; img-src https://*; child-src 'none';\">\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("一个网站管理者想要所有内容均来自站点的同一个源 (不包括其子域名)")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Content-Security-Policy: default-src 'self'\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("一个网站管理者允许内容来自信任的域名及其子域名 (域名不必须与CSP设置所在的域名相同)")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Content-Security-Policy: default-src 'self' *.trusted.com\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("一个网站管理者允许网页应用的用户在他们自己的内容中包含来自任何源的图片, 但是限制音频或视频需从信任的资源提供者(获得)，所有脚本必须从特定主机服务器获取可信的代码.")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Content-Security-Policy: default-src 'self'; img-src *; media-src media1.com media2.com; script-src userscripts.example.com\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在这里，各种内容默认仅允许从文档所在的源获取, 但存在如下例外:")]),e._v(" "),s("p",[e._v('图片可以从任何地方加载(注意 "*" 通配符)。')]),e._v(" "),s("p",[e._v("多媒体文件仅允许从 media1.com 和 media2.com 加载(不允许从这些站点的子域名)。")]),e._v(" "),s("p",[e._v("可运行脚本仅允许来自于userscripts.example.com。")]),e._v(" "),s("ul",[s("li",[e._v("一个线上银行网站的管理者想要确保网站的所有内容都要通过SSL方式获取，以避免攻击者窃听用户发出的请求。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Content-Security-Policy: default-src https://onlinebanking.jumbobank.com\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("该服务器仅允许通过HTTPS方式并仅从onlinebanking.jumbobank.com域名来访问文档。")]),e._v(" "),s("ul",[s("li",[e._v("一个在线邮箱的管理者想要允许在邮件里包含HTML，同样图片允许从任何地方加载，但不允许JavaScript或者其他潜在的危险内容(从任意位置加载)。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Content-Security-Policy: default-src 'self' *.mailsite.com; img-src *\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("注意这个示例并未指定script-src。在此CSP示例中，站点通过 default-src 指令的对其进行配置，这也同样意味着脚本文件仅允许从原始服务器获取。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("使用 HttpOnly 属性")])]),e._v(" "),s("p",[e._v("使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。")]),e._v(" "),s("h4",{attrs:{id:"csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[e._v("#")]),e._v(" CSRF 攻击")]),e._v(" "),s("p",[e._v("CSRF 英文全称是 Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，"),s("strong",[e._v("CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事")]),e._v("。")]),e._v(" "),s("p",[s("strong",[e._v("和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。")])]),e._v(" "),s("p",[e._v("CSRF 攻击的三个必要条件：")]),e._v(" "),s("p",[e._v("第一个，目标站点一定要有 CSRF 漏洞；")]),e._v(" "),s("p",[e._v("第二个，用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；")]),e._v(" "),s("p",[e._v("第三个，需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛。")]),e._v(" "),s("h5",{attrs:{id:"如何防止-csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何防止-csrf-攻击"}},[e._v("#")]),e._v(" 如何防止 CSRF 攻击")]),e._v(" "),s("ol",[s("li",[e._v("充分利用好 Cookie 的 SameSite 属性")])]),e._v(" "),s("p",[e._v("在 HTTP 响应头中，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项，如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set-cookie: 1P_JAR=2019-10-20-06; expires=Tue, 19-Nov-2019 06:36:21 GMT; path=/; domain=.google.com; SameSite=none\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("Strict 最为严格。如果 SameSite 的值是 Strict，那么浏览器会完全禁止第三方 Cookie。简言之，如果你从极客时间的页面中访问 InfoQ 的资源，而 InfoQ 的某些 Cookie 设置了 SameSite = Strict 的话，那么这些 Cookie 是不会被发送到 InfoQ 的服务器上的。只有你从 InfoQ 的站点去请求 InfoQ 的资源时，才会带上这些 Cookie。")]),e._v(" "),s("li",[e._v("Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。")]),e._v(" "),s("li",[e._v("而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。")])]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("验证请求的来源站点")])]),e._v(" "),s("p",[e._v("在服务器端验证请求来源的站点。")]),e._v(" "),s("p",[e._v("HTTP 请求头中的 Referer 和 Origin 属性。")]),e._v(" "),s("p",[e._v("Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，这是 Origin 和 Referer 的一个主要区别。在这里需要补充一点，Origin 的值之所以不包含详细路径信息，是有些站点因为安全考虑，不想把源站点的详细路径暴露给服务器。")]),e._v(" "),s("p",[e._v("因此，服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("CSRF Token")])]),e._v(" "),s("p",[e._v("第一步，在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。")]),e._v(" "),s("p",[e._v("第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请求。")])])}),[],!1,null,null,null);t.default=i.exports}}]);